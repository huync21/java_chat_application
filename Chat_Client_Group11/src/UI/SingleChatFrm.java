/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import Model.Message;
import Model.Room;
import Model.User;
import Model.UserInARoom;
import Service.ClientProcess;
import java.awt.Color;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 *
 * @author LENOVO
 */
public class SingleChatFrm extends javax.swing.JFrame {

    /**
     * Creates new form SingleChatFrm
     */
    private ClientProcess clientProcess;
    String messagesOnTheScreen = "";

    public SingleChatFrm(ClientProcess clientProcess) {
        initComponents();
        this.clientProcess = clientProcess;
        
        btnBack.addActionListener((e) -> {
            clientProcess.outRoom();// ngừng cái thread đang lắng nghe lại khi quay về màn hình khác
            new SingleChatRoomsFrm(clientProcess).setVisible(true);
            this.dispose();
        });
        
        // Lấy ra user còn lại trong phòng
        User currentUser = clientProcess.getUser();
        User theRestUserInTheRoom = new User();
        Room currentRoom = clientProcess.getRoom();
        ArrayList<UserInARoom> listUserInCurrentRoom = currentRoom.getListUserInARoom();
        for (UserInARoom u : listUserInCurrentRoom) {
            if (u.getUser().getId() != currentUser.getId()) {
                theRestUserInTheRoom = u.getUser();
            }
        }

        // In ra tên user còn lại và trạng thái đăng nhập
        labelTheRestUserName.setText(theRestUserInTheRoom.getUserName() + "(" + theRestUserInTheRoom.getFullName() + ")");
        if (theRestUserInTheRoom.getOnlineStatus() == 1) {
            labelStatus.setText("online");
            labelStatus.setForeground(Color.GREEN);
        } else {
            labelStatus.setText("offline");
            labelStatus.setForeground(Color.red);
        }

        //Lúc mới mở màn hình chat của phòng này thì lấy ra danh sách các tin nhắn cũ trong phòng này từ database
        ArrayList<Message> listMessagesInRoom = clientProcess.getMessagesFromDatabase(currentRoom);
        clientProcess.setListMessagesInARoom(listMessagesInRoom);
        for (Message m : clientProcess.getListMessagesInARoom()) {
            updateChatScreen(m);
        }
        
//        clientProcess.sendOnlineStatus(1, clientProcess.getRoom().getId(), clientProcess.getUser().getId());
//        lắng nghe để cập nhật trạng thái online/ offline trong phòng chat trên UI của người dùng
//        clientProcess.listenOnlineStatus();
        
        // set room frame cho tiến trình client process để gọi hàm update ui ở bên client process mỗi khi có tin nhắn tới
        clientProcess.setRoomFrame(this);
          
        // lắng nghe tin nhắn tới
        
        clientProcess.listenToMessage();
        
        // Gửi tin nhắn
        btnSend.addActionListener((e) -> {
            String input = txtMessage.getText();

            Message message = new Message();
            message.setTextContent(input);
            message.setTime(new Date());

            // lấy ra id của user in a room của user
            UserInARoom userInARoom = new UserInARoom();
            for (UserInARoom u : currentRoom.getListUserInARoom()) {
                if (currentUser.getId() == u.getUser().getId()) {
                    userInARoom = u;
                    break;
                }
            }
            userInARoom.setUser(currentUser);
            message.setUserInARoom(userInARoom);

            // gửi đi 
            this.clientProcess.sendMessage(message);

            // xóa đi text đã nhập trong input và hiện trong screen chat
            txtMessage.setText("");
            clientProcess.getListMessagesInARoom().add(message);
            
            
        });
        
        
    }

    public void updateChatScreen(Message message) {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
        if (message.getTextContent() != null) {
            messagesOnTheScreen += (message.getUserInARoom().getUser().getUserName()+" ("+sdf.format(message.getTime()) +")" + ":\n" + message.getTextContent() + "\n\n");
            txtChatScreen.setText(messagesOnTheScreen);
        }
    }

    public void updateOnlineStatus(int onlineStatus) {
        if (onlineStatus == 1) {
            labelStatus.setText("online");
            labelStatus.setForeground(Color.GREEN);
        } else if (onlineStatus == 0) {
            labelStatus.setText("offline");
            labelStatus.setForeground(Color.red);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelTheRestUserName = new javax.swing.JLabel();
        btnSend = new javax.swing.JButton();
        txtMessage = new javax.swing.JTextField();
        labelStatus = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtChatScreen = new javax.swing.JTextArea();
        btnBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        labelTheRestUserName.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        labelTheRestUserName.setText("@Name Of The Rest User");

        btnSend.setText("Send");

        labelStatus.setText("status: online or offline");

        txtChatScreen.setEditable(false);
        txtChatScreen.setColumns(20);
        txtChatScreen.setRows(5);
        jScrollPane1.setViewportView(txtChatScreen);

        jScrollPane2.setViewportView(jScrollPane1);

        btnBack.setText("<---");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 651, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(btnBack)
                        .addGap(40, 40, 40)
                        .addComponent(labelTheRestUserName)
                        .addGap(44, 44, 44)
                        .addComponent(labelStatus))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(txtMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 525, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSend)))
                .addContainerGap(209, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelTheRestUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelStatus)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(btnBack)))
                .addGap(24, 24, 24)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSend)
                    .addComponent(txtMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnSend;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelStatus;
    private javax.swing.JLabel labelTheRestUserName;
    private javax.swing.JTextArea txtChatScreen;
    private javax.swing.JTextField txtMessage;
    // End of variables declaration//GEN-END:variables
}
